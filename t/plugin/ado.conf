#!/usr/bin/perl
use strict;
use warnings;
use utf8;
my $app     = app;
my $home    = app->home;
my $moniker = app->moniker;

# Just for the tests to bootstrap the database in memory
# because CPAN-testers do not like additional fiels created by sqlite
# We can not use here Ado::Plugin::AdoHelpers::do_sql_file
# because of deep recursion problem with $app
sub do_sql_file {
  my ($dbh, $sql_file) = @_;
  my $SQL = Mojo::Util::decode('UTF-8', Mojo::Util::slurp($sql_file));

  #Remove multi-line comments
  $SQL =~ s|/\*+.+?\*/\s+?||gsmx;
  local $dbh->{RaiseError} = 1;
  my $last_statement = '';
  eval {
    $dbh->begin_work;
    for my $st (split /;/smx, $SQL) {
      $last_statement = $st;
      $dbh->do($st) if $st =~ /\S+/smx;
    }
    $dbh->commit;
  } || do {
    $dbh->rollback;
    my $e = "\nError in statement:$last_statement\n$@";
    $app->log->error($e);
    Carp::croak($e);
  };
}

{ plugins => [
    'PODRenderer',
    {name => 'charset', config => {charset => 'UTF-8'}},
    { name   => 'DSC',
      config => {
        database       => ':memory:',
        dbh_attributes => {sqlite_unicode => 1},
        driver         => 'SQLite',
        namespace      => 'Ado::Model',
        onconnect_do   => [
          sub {
            my $dbh = shift->dbh;
            $dbh->sqlite_create_function('upper', 1, sub { uc(shift) });
            $dbh->sqlite_create_function('lower', 1, sub { lc(shift) });
            do_sql_file($dbh, $app->ado_home->rel_file('etc/ado-sqlite-schema.sql'));
            do_sql_file($dbh, $app->ado_home->rel_file('etc/ado-sqlite-data.sql'));
          },
        ],
        DEBUG => 0,
      },
    },
    'ado_helpers',
    'SemanticUI',
    'auth',
    'i18n',
    'admin',
  ],
  commands => {},
  routes   => [
    { route => '/',
      via   => [qw(GET OPTIONS)],
      to    => 'default#index',
    },

  ],    #end routes
};
